<?xml version="1.0" encoding="UTF-8"?>
<!--
Copyright 2024 Google LLC

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
-->

<!--
The very first version of this pom.xml file was generated using
the Spring "initialz": https://start.spring.io/
-->

<project
  xmlns="http://maven.apache.org/POM/4.0.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">

  <modelVersion>4.0.0</modelVersion>

  <parent>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-parent</artifactId>
    <version>3.4.6</version>
    <relativePath /> <!-- lookup parent from repository -->
  </parent>

  <groupId>com.google</groupId>
  <artifactId>cloud-client-api</artifactId>
  <version>0.0.0-SNAPSHOT</version>
  <name>cloud-client-api</name>
  <description>Terraform Cloud Client API</description>

  <properties>
    <java.version>21</java.version>
  </properties>

  <dependencies>

    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-thymeleaf</artifactId>
    </dependency>
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-web</artifactId>
    </dependency>
    <!--
      spring-boot-devtools is used during development.
      It disables caching of templates during development.
      It also enables live-reloading of the web app â€” upon source code changes.
    -->
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-devtools</artifactId>
      <scope>runtime</scope>
      <optional>true</optional>
    </dependency>

    <!-- Testing -->
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-test</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
    <groupId>org.assertj</groupId>
      <artifactId>assertj-core</artifactId>
      <version>3.27.3</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.junit.jupiter</groupId>
      <artifactId>junit-jupiter-engine</artifactId>
      <version>5.11.4</version>
      <scope>test</scope>
    </dependency>

    <!-- Logging - configured in logback-spring.xml -->
    <!-- Logback "appender" that directs logs to Google Cloud Logging. -->
    <!-- google-cloud-logging-logback declares logback/slf4j dependencies -->
    <dependency>
      <groupId>com.google.cloud</groupId>
      <artifactId>google-cloud-logging-logback</artifactId>
      <version>0.132.0-alpha</version>
    </dependency>

    <!-- Google Cloud Storage -->
    <dependency>
      <groupId>com.google.cloud</groupId>
      <artifactId>google-cloud-storage</artifactId>
      <version>2.56.0</version>
    </dependency>

    <!-- Gson is used to convert objects to/from JSON strings. -->
    <dependency>
      <groupId>com.google.code.gson</groupId>
      <artifactId>gson</artifactId>
      <version>2.13.1</version>
    </dependency>

    <!-- Apache Commons CSV is used for parsing CSV. -->
    <dependency>
      <groupId>org.apache.commons</groupId>
      <artifactId>commons-csv</artifactId>
      <version>1.14.1</version>
    </dependency>

  </dependencies>

  <build>
    <plugins>

      <!-- Build the Spring Boot web application. -->
      <plugin>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-maven-plugin</artifactId>
      </plugin>

      <!--- Build a separate JAR file for the processing job. -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-jar-plugin</artifactId>
        <version>3.4.2</version>
        <executions>
          <execution>
            <id>ProcessingJob</id>
            <goals>
              <goal>jar</goal>
            </goals>
            <phase>package</phase>
            <configuration>
              <classifier>processingjob</classifier>
              <archive>
                <manifest>
                  <addClasspath>true</addClasspath>
                  <!-- We use maven-dependency-plugin to copy dependencies into ./target/libs/. -->
                  <classpathPrefix>libs/</classpathPrefix>
                  <mainClass>com.google.cloudclientapi.ProcessingJob</mainClass>
                </manifest>
              </archive>
            </configuration>
          </execution>
        </executions>
      </plugin>

      <!-- The JAR file for the processing job needs dependencies to be copied into a separate folder. -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-dependency-plugin</artifactId>
        <executions>
          <execution>
            <id>copy-dependencies</id>
            <phase>prepare-package</phase>
            <goals>
              <goal>copy-dependencies</goal>
            </goals>
            <configuration>
              <outputDirectory>${project.build.directory}/libs</outputDirectory>
            </configuration>
          </execution>
        </executions>
      </plugin>

      <!-- Configure linter to enforce Google's Java style guide. -->
      <plugin>
        <groupId>com.spotify.fmt</groupId>
        <artifactId>fmt-maven-plugin</artifactId>
        <version>2.27</version>
        <configuration>
          <style>google</style>
          <verbose>true</verbose>
        </configuration>
        <executions>
          <execution>
            <goals>
              <goal>check</goal>
              <!-- Using <goal>format</goal> instead will auto-format/fix your code as you build. -->
              <!-- Alternatively, to auto-format/fix your code, run: mvn com.spotify.fmt:fmt-maven-plugin:format -->
              <!-- Unlike <goal>format</goal>, <goal>check</goal> runs during "mvn verify". -->
            </goals>
          </execution>
        </executions>
      </plugin>

    </plugins>
  </build>

</project>
